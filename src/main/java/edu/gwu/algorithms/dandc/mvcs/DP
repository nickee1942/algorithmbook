package edu.gwu.algorithms.dandc.mvcs;

import edu.gwu.algorithms.problems.MVCS;
import edu.gwu.algorithms.utils.Utils;
/* DP solution, time complexity is O(n), space complexity is O(n)*/
public class MVCS_DC implements MVCS {

    /** Finds the maximum value CS in a, given left and right indices, both inclusive. */
    public int findMax(int[] a) {
        //create a storage to store max value at every postion
        int[] store = new int[a.length];
        //initialization, max at a[0] is a[0]
        store[0] = a[0];
        int max = store[0];
        for(int i = 1; i < nums.length; i++){
            //if last position's max is greater than 0, then add it, otherwise dont add it
            store[i] = nums[i] + (store[i - 1] > 0 ? store[i - 1] : 0);
            //renew max value
            max = max > store[i] ? max : store[i];
        }
        return max;
    }
}
